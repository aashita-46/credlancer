Problem Statement
Unreliable Payments: Students and freelancers often fear scams or not getting paid for gigs.
Fake Mentors: Beginners struggle to find genuine mentors, since anyone can claim expertise.
Lack of Verifiable Proof: Students complete projects, internships, and courses, but have no tamper-proof way to showcase these skills to recruiters.
 Solution:
Credlancer is a decentralized platform built on Aptos blockchain that provides:

Secure Escrow Payments: Smart contract-powered escrow ensures freelancers get paid safely
Verified Mentors: Blockchain-backed mentor verification with NFT badges
Skill Badges: Soulbound NFTs for completed gigs/projects as tamper-proof resumes

🏗️ Architecture
┌─────────────────┐
│   Frontend      │
│   (React.js)    │
└────────┬────────┘
         │
         ▼
┌─────────────────┐
│   Backend API   │
│   (Express.js)  │
└────────┬────────┘
         │
         ▼
┌─────────────────┐
│ Aptos Blockchain│
│  Smart Contracts│
│  - Escrow       │
│  - Badges       │
└─────────────────┘

For Freelancers

✅ Secure payment guarantee through escrow
✅ Build on-chain reputation with badges
✅ Verifiable portfolio for recruiters
✅ No middleman, lower fees

For Clients

✅ Only pay for approved work
✅ Find verified freelancers
✅ Dispute resolution mechanism
✅ Transparent transaction history

For Students

✅ Earn skill badges from projects
✅ Connect with verified mentors
✅ Build tamper-proof resume
✅ Stand out to recruiters

For Mentors

✅ Get blockchain verification
✅ Enhanced credibility
✅ Access to motivated students
✅ Fair compensation

📁 Project Structure
skilltrust/
├── move/                          # Smart Contracts
│   ├── sources/
│   │   ├── escrow.move           # Escrow contract
│   │   └── badges.move           # Badge NFT contract
│   └── Move.toml                 # Move package config
├── backend/                       # Backend API
│   ├── server.js                 # Express server
│   ├── package.json
│   └── .env
├── frontend/                      # React Frontend
│   ├── src/
│   │   ├── App.jsx               # Main application
│   │   ├── index.jsx
│   │   └── index.css
│   ├── public/
│   │   └── index.html
│   ├── package.json
│   └── tailwind.config.js
├── deploy.sh                      # Deployment script
├── contract-address.txt           # Deployed contract address
└── README.md

🛠️ Technology Stack
Blockchain

Aptos Blockchain - Layer 1 blockchain for smart contracts
Move Language - Smart contract programming language
Aptos CLI - Command-line interface for deployment

Backend

Node.js & Express.js - REST API server
Aptos SDK - Blockchain integration
Axios - HTTP client

Frontend

React.js - UI framework
Tailwind CSS - Styling
Lucide React - Icons
React Router - Navigation
Petra Wallet - Wallet integration


Installation & Setup:-

Step 1: Clone the Repository
bashgit clone https://github.com/yourusername/credlancer.git
cd credlancer

Step 2: Initialize Aptos Account
bash# Initialize Aptos CLI with testnet
aptos init --network testnet

Step 3: Setup Move Smart Contracts
bash# Create the Move project structure
mkdir -p move/sources

# Copy the Move.toml, escrow.move, and badges.move files to:
# - move/Move.toml
# - move/sources/escrow.move
# - move/sources/badges.move

Step 4: Deploy Smart Contracts
bash# Make deploy script executable
chmod +x deploy.sh

./deploy.sh

Expected output:
🚀 Starting CredLancer Smart Contract Deployment...
✅ Move.toml created
🔨 Compiling smart contracts...
✅ Compilation successful
🧪 Running tests...
🌐 Deploying to Aptos Testnet...
✅ Deployment successful!
📝 Contract deployed at: 0x1234...
⚙️  Initializing contracts...
✅ Contracts initialized!
🎉 Deployment complete!
Save the contract address from the output!

Step 5: Setup Backend
bash# Navigate to backend directory
cd backend

npm install

cat > .env << EOF
APTOS_NETWORK=testnet
CONTRACT_ADDRESS=YOUR_DEPLOYED_CONTRACT_ADDRESS
APTOS_NODE_URL=https://fullnode.testnet.aptoslabs.com/v1
APTOS_FAUCET_URL=https://faucet.testnet.aptoslabs.com
PORT=5000
EOF


npm start
Backend should be running on http://localhost:5000
Step 6: Setup Frontend
bash# Open new terminal
cd frontend

npm install

npm start
Frontend should open at http://localhost:3000
🎯 Usage Guide
For Clients (Hiring)

Connect Wallet: Click "Connect Wallet" and approve Petra connection
Create Contract:

Go to "Contracts" page
Click "Create Contract"
Enter freelancer's wallet address
Set amount and description
Submit (funds will be locked in escrow)


Review Work: When freelancer submits, review and approve
Release Payment: Click "Approve & Release Payment" to complete

For Freelancers

Connect Wallet: Connect your Petra wallet
View Contracts: See contracts where you're the freelancer
Start Work: Click "Start Work" on assigned contracts
Submit Work: Click "Submit Work" when done
Get Paid: Receive payment + skill badge automatically

For Mentors

Register: Create profile as mentor
Get Verified: Admin verifies and issues mentor badge (NFT)
Appear in Listing: Verified mentors show in "Mentors" page

For Students

Find Mentors: Browse verified mentors
Complete Gigs: Work on freelance projects
Earn Badges: Collect skill badges (NFTs) for completed work
Build Resume: Use on-chain badges as verifiable proof

📡 API Endpoints
User Endpoints

POST /api/users/register - Register new user
GET /api/users/:walletAddress - Get user by wallet
GET /api/users?role=mentor - Get users by role

Contract Endpoints

POST /api/contracts/create - Create new escrow contract
GET /api/contracts - Get all contracts
GET /api/contracts/:id - Get specific contract
PUT /api/contracts/:id/status - Update contract status

Badge Endpoints

POST /api/badges/issue - Issue new badge
GET /api/badges/:walletAddress - Get user's badges
GET /api/badges?badgeType=SKILL - Filter badges by type

Mentor Endpoints

POST /api/mentors/verify - Verify mentor
GET /api/mentors - Get all verified mentors

Statistics

GET /api/stats - Get platform statistics

🎨 Features
✅ Implemented Features

 Secure escrow smart contract
 Multi-stage contract workflow (Created → In Progress → Submitted → Completed)
 Skill badge NFT system
 Mentor verification system
 Wallet integration (Petra)
 React frontend with Tailwind CSS
 Express.js backend API
 Real-time contract status updates
 User profile management
 Platform statistics dashboard

🗺️ Roadmap
Phase 1: MVP (Current) ✅

 Escrow smart contracts
 Badge NFT system
 Basic frontend UI
 Wallet integration
 Testnet deployment

Phase 2: Beta Launch (Month 1-2)

 Mainnet deployment
 Mobile responsive design
 Advanced search & filters
 Rating and review system
 Email notifications

Phase 3: Growth (Month 3-4)

 Milestone-based payments
 Multi-token support (USDC, USDT)
 Chat/messaging system
 Mobile app (React Native)
 Referral program

Phase 4: Scale (Month 5-6)

 DAO governance
 Staking mechanism
 Advanced analytics dashboard
 API for third-party integration
 White-label solutions for enterprises

🔮 Future Enhancements

 Dispute resolution mechanism
 Rating and review system
 Multi-token support (USDC, USDT)
 Milestone-based payments
 Chat/messaging system
 Advanced search and filters
 Mobile app (React Native)
 DAO governance
 Staking mechanism for mentors

🙏 Acknowledgments

Aptos Foundation - For the powerful blockchain infrastructure
Petra Wallet Team - For seamless wallet integration
Move Community - For excellent documentation and support

DEPLOYMENT LINK: 
Transaction submitted: https://explorer.aptoslabs.com/txn/0x2ebb7c99d6709914942082554c8da0a2de96b46fee718ca57a8e74c7dbf8914f?network=devnet
transaction id: 0x2ebb7c99d6709914942082554c8da0a2de96b46fee718ca57a8e74c7dbf8914f















